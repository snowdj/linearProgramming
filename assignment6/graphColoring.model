param n; # number of vertices
param k; # number of colors
var x {i in 1..n, j in 1..k} binary;
var t integer >= 0;
set E within { i in 1..n, j in 1..n}; # edge set
param colors{i in 1..k} symbolic;

minimize obj: t;

# make sure t is the largest color id.

c1 { i in 1..n}: sum{j in 1..k} j * x[i,j] <= t;

# make sure that each node has a unique color.

c2 { i in 1..n}: sum{j in 1..k} x[i,j] = 1;

# make sure that no two adjacent nodes have the same color.

c3{ (i,j) in E, l in 1..k}: x[i,l] + x[j,l] <= 1;

solve;
printf {i in 1..n, j in 1..k: x[i,j] >= 1 } "# vertex %d has color %d \n", i, j;

printf "# need %d colors overall \n", t;

printf "# OUTPUT IN DOT FORMAT \n";
printf "graph G { \n";
printf {i in 1..n, j in 1..k: x[i,j] >= 1 } "%d[ label = %d, fill= %s ];\n ", i, i, colors[j];
printf {(i,j) in E} "%d -- %d \n", i, j;
printf "}\n";

data;

# number of vertices in the graph
param n := 16;

# Number of colors to try out.
param k := 8;

# edge set of the graph
set E :=  (1,7) (1,13) (2,7) (2,10) (2,13) (2,14) (3,7) (3,8) (3,10) (3,13) (3,14) (3,16) (4,7) (4,8) (4,10) (4,11) (4,13) (4,14) (4,16) (5,7) (5,8) (5,9) (5,10) (5,11) (5,13) (5,14) (5,15) (5,16) (6,7) (6,8) (6,9) (6,10) (6,11) (6,13) (6,14) (6,15) (6,16) (7,10) (7,13) (8,10) (8,11) (8,13) (8,14) (8,16) (9,10) (9,11) (9,13) (9,14) (9,15) (9,16) (10,13) (10,14) (10,16) (11,13) (11,14) (11,15) (11,16) (12,13) (12,14) (12,15) (12,16) (13,14) (13,16) (14,16) (15,16);


## param colors :=
## 1 "red"
## 2 "green"
## 3 "blue";

end;
